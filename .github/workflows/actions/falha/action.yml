on:
  workflow_call:
name: Bem sucedido
runs: 
  using: 'composite'
  steps:
    - name: Bem sucedido
      shell: bash
      run: |
          echo "Ambiente do deploy ${{ env.environment }}"
          echo "RUN ID $GITHUB_RUN_ID"
          echo "REPO NAME: $GITHUB_REPOSITORY"
          projeto=$(echo "$GITHUB_REPOSITORY") | cut -d "/" -f 2
          projeto=${GITHUB_REPOSITORY##*/}

          echo "Projeto: $projeto"
          echo "Branch: $GITHUB_REF_NAME"
          echo "Status: $GITHUB_RUN_STATUS"
          echo "Usuario: $GITHUB_TRIGGERING_ACTOR"
          
          # atualizar api de metrics
          echo "PUT API"
          curl -k -X 'PUT' \
                    'https://192.168.0.93:32776/api/Evento/$GITHUB_RUN_ID' \
                    -H 'accept: text/plain' \
                    -H 'Content-Type: application/json' \
                    -d '{
                          "buildId": "'$GITHUB_RUN_ID'",
                          "statusRun": "failed"
                        }'
          # se tiver var de gmud enviar suscesso para API para
          if  [ -z "${{ github.event.inputs.Gmud }}" ]
          then
            echo "Gmud nÃ£o informada."
          else  
            echo "Gmud informada: [ ${{ github.event.inputs.Gmud }} ]"
            IMAGE_BUILD_ID=$(curl -k -X 'GET' 'https://192.168.0.93:32776/api/Changes/getBuildIDGmud?gmud=${{ github.event.inputs.Gmud }}&recurso=${{ github.event.repository.name }}' -H 'accept: text/plain')
            echo "IMAGE_BUILD_ID=$(echo $IMAGE_BUILD_ID)" >> $GITHUB_ENV
            
            curl -k -X 'PUT' \
                      'https://192.168.0.93:32776/api/Changes/updExecucaoChange' \
                      -H 'accept: text/plain' \
                      -H 'Content-Type: application/json' \
                      -d '{
                            "id": ${{ github.event.inputs.Gmud }},
                            "buildid": "'$IMAGE_BUILD_ID'",
                            "statusExecucao": "failed"
                          }'
          fi       

          # usar case para validar o job
          case $GITHUB_JOB in    
            "Validate")
               LOGERROR_MESSAGE="Erro no validate" >> $GITHUB_ENV
              ;;
            "pipeline-build-dev")
                LOGERROR_MESSAGE="Erro no pipeline-build-dev" >> $GITHUB_ENV
              ;;
            "pipeline-build-hml")
                LOGERROR_MESSAGE="Erro no pipeline-build-hml" >> $GITHUB_ENV
              ;;
            "pipeline-build-prd")
                LOGERROR_MESSAGE="Erro no pipeline-build-prd" >> $GITHUB_ENV
              ;;
            "pipeline-deploy-dev")
                LOGERROR_MESSAGE="Erro no pipeline-deploy-dev" >> $GITHUB_ENV
              ;;
            "pipeline-deploy-hml")
                LOGERROR_MESSAGE="Erro no pipeline-deploy-hml" >> $GITHUB_ENV
              ;;
            "pipeline-deploy-prd")
                LOGERROR_MESSAGE="Erro no pipeline-deploy-prd" >> $GITHUB_ENV
              ;;
          esac
            echo "step :-- " $LOGERROR_MESSAGE
            curl -k -X 'POST' \
                      'https://192.168.0.93:32776/api/EventosLog' \
                      -H 'accept: text/plain' \
                      -H 'Content-Type: application/json' \
                      -d '{
                            "id": 0,
                              "buildid": "'$GITHUB_RUN_ID'",
                              "recurso": "'${{ github.event.repository.name }}'",
                              "ambiente": "'${{ env.environment }}'",
                              "erroMsg": "'$GITHUB_JOB'"
                          }'
