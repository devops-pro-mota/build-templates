on:
  workflow_call:
name: ConfigMap-Generator
runs: 
  using: 'composite'
  steps:
    - name: ConfigMap-Generator
      shell: bash
      run: |
         # consultando API para criar ConfigMap / PortalDevOps
         response=$(curl -k -s -X 'POST' 'https://192.168.0.93:32776/api/Dicionario/getDicionario' \
            -H 'accept: text/plain' \
            -H 'Content-Type: application/json' \
            -d '{
            "id": 0,
            "aplicacao": "${{ github.event.repository.name }}",
            "ambiente": "${{ env.environment }}",
            "contexto": "ConfigMap"
         }')

         # valido se ocorreu algum erro na chamada da API
         if [ $? -ne 0 ]; then
           echo "Erro ao chamar a API"
           exit 1
         fi
         # valido se a resposta da API PortalDevOps está vazia
         if [ -z "$response" ]; then
           echo "Resposta vazia da API"
           exit 1
         fi
         
         nome_arquivo="configmap.yml"
         
         # Modelo do ConfigMap inicial / poderia trazer direto da API
         cat <<EOF > $nome_arquivo
         apiVersion: v1
         kind: ConfigMap
         namespace: ${{ github.event.repository.name }}-${{ env.environment }}
         metadata:
           name: ${{ github.event.repository.name }}-cnf
         data:
         EOF
         # Iterando sobre cada item no JSON de resposta e adiciona ao ConfigMap, meu filtro é aplicacao / ambiente / contexto
         echo "$response" | jq -r '.[] | "  \(.variavel): \"\(.valor)\"" ' >> $nome_arquivo
         # Mostra o resultado, para validar
         echo "########## [  $nome_arquivo ] ############################"
         cat $nome_arquivo
         echo "########## [  Fim do Arquivo: $nome_arquivo ] ############"

         # Para aplicar o ConfigMap no Kubernetes / openshift (Preciso ver se vai subir para o github) / ArgoCD
         # kubectl apply -f configmap.yaml
